{"version":3,"sources":["logo.png","merkleDistributor.ts","App.tsx","index.tsx"],"names":["merkleDistributorAddr","merkleDistributorAbi","inputs","internalType","name","type","outputs","stateMutability","defaultProvider","ethers","providers","InfuraProvider","merkleDistributorInterface","utils","Interface","merkleDistributor","Contract","confettiConfig","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","App","useState","input","setInput","claimState","setClaimState","isValidAddress","isAddress","claim","addresses","claims","getAddress","error","a","ethereum","window","request","method","accounts","account","console","log","claimArgs","index","tokenId","proof","data","encodeFunctionData","transactionParameters","to","from","selectedAddress","chainId","params","useEffect","isClaimed","callIsClaimed","src","logo","className","alt","href","Form","Group","controlId","Label","Control","value","onChange","e","target","isInvalid","Boolean","Text","Button","variant","disabled","onClick","executeClaim","active","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d811f2b9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.93609302.png\";","export const merkleDistributorAddr = '0x454317f451f48a1ea281406f76ad6f01f4c2baa3'\nexport const merkleDistributorAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'index',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32[]',\n        name: 'merkleProof',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'claim',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'index',\n        type: 'uint256',\n      },\n    ],\n    name: 'isClaimed',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\n","import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers'\n// @ts-ignore\nimport Confetti from 'react-dom-confetti'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport addresses from './result.json'\nimport logo from './logo.png'\nimport { merkleDistributorAbi, merkleDistributorAddr } from './merkleDistributor'\n\nconst defaultProvider = new ethers.providers.InfuraProvider()\n\nconst merkleDistributorInterface = new ethers.utils.Interface(merkleDistributorAbi)\n\nconst merkleDistributor = new ethers.Contract(merkleDistributorAddr, merkleDistributorAbi, defaultProvider)\n\ntype ClaimState = 'unknown' | 'no-claim' | 'claim-available' | 'claimed'\n\nfunction App() {\n  const [input, setInput] = useState('')\n  const [claimState, setClaimState] = useState<ClaimState>('unknown')\n\n  const isValidAddress = ethers.utils.isAddress(input)\n  const claim = isValidAddress && addresses.claims[ethers.utils.getAddress(input) as keyof typeof addresses.claims]\n\n  let error: string | null = null\n  if (input && !isValidAddress) {\n    error = 'Invalid address'\n  }\n\n  useEffect(() => {\n    async function callIsClaimed() {\n      if (!claim) return\n      try {\n        const isClaimed = await merkleDistributor.isClaimed(claim.index)\n        if (isClaimed) setClaimState('claimed')\n        else setClaimState('claim-available')\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    callIsClaimed()\n  }, [claim])\n\n  async function executeClaim() {\n    try {\n      if (!claim || !ethers.utils.isAddress(input)) return\n\n      // @ts-ignore\n      const ethereum = window.ethereum\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n      const account = accounts[0]\n      console.log({ account })\n\n      const claimArgs = [claim.index, input, claim.tokenId, claim.proof]\n      const data = merkleDistributorInterface.encodeFunctionData('claim', claimArgs)\n\n      const transactionParameters = {\n        to: merkleDistributorAddr, // Required except during contract publications.\n        from: ethereum.selectedAddress, // must match user's active address.\n        data: data,\n        chainId: 1, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n      }\n\n      console.log({ transactionParameters })\n\n      await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return (\n    <div>\n      <header>\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n        <div className=\"top-menu\">\n          <a href=\"https://dappnode.io\">Home</a>\n          <a href=\"https://dappnode.io\">Source</a>\n        </div>\n      </header>\n      <div className=\"claim-container\">\n        <h2>DAppNode NFT claim</h2>\n\n        <p>\n          Claim your NFT challenge token. <br></br>\n          <a href=\"https://medium.com/dappnode/dappnode-validator-nft-challenge-40e12748cf9b\">Medium post</a> with the\n          announcement\n        </p>\n\n        <Form className=\"claim-form\">\n          <Form.Group controlId=\"address\">\n            <Form.Label>Claim address</Form.Label>\n            <Form.Control value={input} onChange={(e) => setInput(e.target.value)} isInvalid={Boolean(error)} />\n\n            {error ? (\n              <Form.Text className=\"text-danger\">{error}</Form.Text>\n            ) : (\n              <Form.Text className=\"text-muted\">You can claim for any address</Form.Text>\n            )}\n          </Form.Group>\n        </Form>\n\n        {claimState === 'claim-available' && <h5>ðŸŽ‰ðŸŽ‰ You have an NFT! ðŸŽ‰ðŸŽ‰</h5>}\n        {claimState === 'no-claim' && <h5>Account has no NFT</h5>}\n        {claimState === 'claimed' && <h5>Account already claimed NFT</h5>}\n\n        <Button\n          className=\"claim-button\"\n          variant=\"dappnode\"\n          disabled={claimState !== 'claim-available'}\n          onClick={() => executeClaim()}\n        >\n          CLAIM\n        </Button>\n      </div>\n\n      <div className=\"confetti\">\n        {/* @ts-ignore */}\n        <Confetti\n          active={claimState === 'claim-available'}\n          // @ts-ignore\n          config={confettiConfig}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst confettiConfig = {\n  angle: '90',\n  spread: 360,\n  startVelocity: 40,\n  elementCount: '117',\n  dragFriction: '0.09',\n  duration: 3000,\n  stagger: '8',\n  width: '15px',\n  height: '15px',\n  perspective: '589px',\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.scss'\nimport './dappnode_colors.scss'\nimport './dappnode_styles.scss'\n\n// @ts-ignore\ndeclare global {\n  // tslint:disable-next-line\n  interface Window {\n    web3: any\n    ethereum: any\n    Web3Modal: any\n    Box: any\n    box: any\n    space: any\n    [name: string]: any\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}